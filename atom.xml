<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fine_974&#39;s Blog</title>
  
  <subtitle>珂学是第一生产力</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-28T09:47:45.070Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fine_974</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode75 题解系列（一）数组 / 字符串篇：9 道高频题解与心得</title>
    <link href="http://example.com/2025/02/28/leetcode75/"/>
    <id>http://example.com/2025/02/28/leetcode75/</id>
    <published>2025-02-28T07:08:24.000Z</published>
    <updated>2025-02-28T09:47:45.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h2><p>LeetCode75 是面向算法面试的经典题库，涵盖高频考点与核心思想。本文将针对「数组 / 字符串」专题的 9 道题目，提供简洁清晰的题解思路、代码实现与刷题心得，助你快速掌握解题框架。</p><span id="more"></span><hr><h2 id="一、题目分类与核心技巧"><a href="#一、题目分类与核心技巧" class="headerlink" title="一、题目分类与核心技巧"></a><strong>一、题目分类与核心技巧</strong></h2><p>数组 / 字符串篇共 <strong>9 道题目</strong>，覆盖以下分类（按出现频率排序）：</p><ol><li><strong>双指针</strong>（5题）</li><li><strong>贪心算法</strong>（2题）</li><li><strong>数学推导</strong>（1题）</li><li><strong>前缀和</strong>（1题）</li><li><strong>数组操作</strong>（高频基础题型）</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">题目名称</th><th style="text-align:left">题号</th><th style="text-align:left">核心技巧</th><th style="text-align:left">关联标签</th></tr></thead><tbody><tr><td style="text-align:left">交替合并字符串</td><td style="text-align:left">1768</td><td style="text-align:left">双指针遍历合并</td><td style="text-align:left">字符串、双指针</td></tr><tr><td style="text-align:left">字符串的最大公因子</td><td style="text-align:left">1071</td><td style="text-align:left">数学（最大公约数）</td><td style="text-align:left">字符串、数学</td></tr><tr><td style="text-align:left">拥有最多糖果的孩子</td><td style="text-align:left">1431</td><td style="text-align:left">数组遍历 + 条件判断</td><td style="text-align:left">数组</td></tr><tr><td style="text-align:left">种花问题</td><td style="text-align:left">605</td><td style="text-align:left">贪心（跳跃式种植）</td><td style="text-align:left">数组、贪心</td></tr><tr><td style="text-align:left">反转字符串中的元音字母</td><td style="text-align:left">345</td><td style="text-align:left">双指针交换元素</td><td style="text-align:left">字符串、双指针</td></tr><tr><td style="text-align:left">反转字符串中的单词</td><td style="text-align:left">151</td><td style="text-align:left">双指针分段处理</td><td style="text-align:left">字符串、双指针</td></tr><tr><td style="text-align:left">除自身以外数组的乘积</td><td style="text-align:left">238</td><td style="text-align:left">前缀积（空间优化技巧）</td><td style="text-align:left">数组、前缀和</td></tr><tr><td style="text-align:left">递增的三元子序列</td><td style="text-align:left">334</td><td style="text-align:left">贪心（维护最小候选值）</td><td style="text-align:left">数组、贪心</td></tr><tr><td style="text-align:left">压缩字符串</td><td style="text-align:left">443</td><td style="text-align:left">双指针原地修改</td><td style="text-align:left">字符串、双指针</td></tr></tbody></table></div><hr><h2 id="二、题目详解与代码实现"><a href="#二、题目详解与代码实现" class="headerlink" title="二、题目详解与代码实现"></a><strong>二、题目详解与代码实现</strong></h2><h3 id="1-1768-交替合并字符串"><a href="#1-1768-交替合并字符串" class="headerlink" title="1. 1768. 交替合并字符串"></a><strong>1. 1768. 交替合并字符串</strong></h3><p><strong>题目链接</strong>：<a href="https://leetcode.cn/problems/merge-strings-alternately/">1768. 交替合并字符串</a></p><p><strong>题目解析</strong>：交替合并给定的字符串 <code>word1</code> 和 <code>word2</code> 。  </p><p><strong>解法</strong>：使用两个指针，直接按要求模拟即可。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">mergeAlternately</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = word1.<span class="built_in">size</span>(), len2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len1 || j &lt; len2; i++, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len1) ans += word1[i];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; len2) ans += word2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong>：时间复杂度 $O(m + n)$，空间复杂度 $O(1)$</p><hr><h3 id="2-1071-字符串的最大公因子"><a href="#2-1071-字符串的最大公因子" class="headerlink" title="2. 1071. 字符串的最大公因子"></a><strong>2. 1071. 字符串的最大公因子</strong></h3><p><strong>题目链接</strong>：<a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/">1071. 字符串的最大公因子</a><a href="https://leetcode.cn/problems/greatest-common-divisor-of-strings/"></a></p><p><strong>题目解析</strong>：给定两个字符串 <code>str1</code> 和 <code>str2</code> 。返回 <em>最长字符串 <code>x</code>，要求满足 <code>x</code> 能除尽 <code>str1</code> 且 <code>x</code> 能除尽 <code>str2</code></em> 。</p><p><strong>解法</strong>：常规的解法模拟即可，而对于最大公因数算法，不难想到，如果它们有公因子 <code>abc</code>，那么 <code>str1</code> 就是 <code>m</code>个 <code>abc</code> 的重复，<code>str2</code> 是 <code>n</code>个 <code>abc</code> 的重复，连起来就是 <code>m+n</code> 个 <code>abc</code>，而 <code>m+n</code> 个 <code>abc</code> 跟 <code>n+m</code> 个 <code>abc</code> 是一样的。所以如果 <code>str1 + str2 === str2 + str1</code> 就意味着有解。我们也很容易想到 <code>str1 + str2 !== str2 + str1</code> 也是无解的充要条件。故当确定有解的情况下，最优解是长度为 <code>gcd(str1.length, str2.length)</code> 的字符串。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">gcdOfStrings</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str1 + str2 != str2 + str1)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="built_in">gcd</span>(str1.<span class="built_in">size</span>(), str2.<span class="built_in">size</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong>：时间复杂度 $O(n)$，空间复杂度 $O(n)$</p><hr><h4 id="3-移除元素（27-Remove-Element）"><a href="#3-移除元素（27-Remove-Element）" class="headerlink" title="3. 移除元素（27. Remove Element）"></a><strong>3. 移除元素（27. Remove Element）</strong></h4><p><strong>题目</strong>：原地移除所有等于 <code>val</code> 的元素。<br><strong>解法</strong>：双指针覆盖<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">nums, val</span>):</span><br><span class="line">    slow = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> fast <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[fast] != val:</span><br><span class="line">            nums[slow] = nums[fast]</span><br><span class="line">            slow += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure><br><strong>心得</strong>：类似去重问题，注意元素顺序可改变时的优化技巧（如交换法）。</p><hr><p>（以下为简要框架，完整版需补充剩余题目）</p><hr><h3 id="三、刷题心得总结"><a href="#三、刷题心得总结" class="headerlink" title="三、刷题心得总结"></a><strong>三、刷题心得总结</strong></h3><ol><li><strong>双指针的普适性</strong>：覆盖数组去重、子序列、滑动窗口等问题。</li><li><strong>贪心算法的直觉培养</strong>：如跳跃游戏中“最大可达距离”的实时更新。</li><li><strong>边界条件处理</strong>：数组越界、空输入、全相同元素等极端情况需优先测试。</li><li><strong>空间复杂度优化</strong>：原地修改是面试加分项，需熟练掌握。</li><li><strong>数学规律挖掘</strong>：如多数元素的“投票法”需理解背后的数学原理。</li></ol><hr><h3 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a><strong>四、结语</strong></h3><p>数组/字符串问题侧重基础操作与思维敏捷性。建议按分类刷题，总结模板，逐步培养对时间复杂度与空间优化的敏感度。后续将更新链表、二叉树等专题，欢迎持续关注！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;LeetCode75 是面向算法面试的经典题库，涵盖高频考点与核心思想。本文将针对「数组 / 字符串」专题的 9 道题目，提供简洁清晰的题解思路、代码实现与刷题心得，助你快速掌握解题框架。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Git 的正确使用姿势与最佳实践：团队协作和版本控制的最佳实践</title>
    <link href="http://example.com/2024/01/31/use-of-git/"/>
    <id>http://example.com/2024/01/31/use-of-git/</id>
    <published>2024-01-31T09:32:33.000Z</published>
    <updated>2024-02-03T11:42:20.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-前面的话"><a href="#0-前面的话" class="headerlink" title="0. 前面的话"></a>0. 前面的话</h3><p>&emsp;&emsp;在现代软件开发领域，团队协作和版本控制是构建成功项目不可或缺的两个关键要素。随着软件项目的规模和复杂性不断增长，有效地管理代码、协调多人合作、跟踪变更以及保持项目的稳定性变得愈发重要。而Git作为分布式版本控制系统，为开发人员带来了强大的工具，帮助他们更好地应对这些挑战。</p><p>&emsp;&emsp;本文主要面向初次进行团队开发的成员，旨在探讨Git的正确使用姿势与最佳实践，以便其团队能够更加快速的入手，感受协作开发的高效性，轻松地管理项目的演变过程，并确保项目的质量和稳定性。</p><span id="more"></span><h3 id="1-事先准备"><a href="#1-事先准备" class="headerlink" title="1. 事先准备"></a>1. 事先准备</h3><ul><li><p>Git下载</p><ul><li>官网下载<a href="https://git-scm.com/">Git (git-scm.com)</a>或命令行<code>git update-git-for-windows</code>更新至新版本</li></ul></li><li><p>注册<a href="https://github.com/">GitHub</a>账号</p></li></ul><h3 id="2-克隆代码到本地"><a href="#2-克隆代码到本地" class="headerlink" title="2. 克隆代码到本地"></a>2. 克隆代码到本地</h3><p>&emsp;&emsp;在多人协作的项目搭建中，通常是由项目组长发起项目协作，通过邮件邀请协作对象加入，被邀请者只需通过邮件点击确认加入项目即可。同时将项目内容克隆到本地，即可在本地进行项目的开发。</p><h4 id="2-1-通过邮箱验证加入Github多人协作"><a href="#2-1-通过邮箱验证加入Github多人协作" class="headerlink" title="2.1. 通过邮箱验证加入Github多人协作"></a>2.1. 通过邮箱验证加入Github多人协作</h4><p><img src="https://pic.imgdb.cn/item/65ba157c871b83018a598be1.png"></p><h4 id="2-2-获取远程仓库的URL地址"><a href="#2-2-获取远程仓库的URL地址" class="headerlink" title="2.2. 获取远程仓库的URL地址"></a>2.2. 获取远程仓库的URL地址</h4><p><img src="https://pic.imgdb.cn/item/65ba1585871b83018a59ae50.png"></p><h4 id="2-3-进入项目工程路径下，打开Git"><a href="#2-3-进入项目工程路径下，打开Git" class="headerlink" title="2.3. 进入项目工程路径下，打开Git"></a>2.3. 进入项目工程路径下，打开Git</h4><p><img src="https://pic.imgdb.cn/item/65ba1602871b83018a5b4362.png"></p><h4 id="2-4-克隆仓库至本地"><a href="#2-4-克隆仓库至本地" class="headerlink" title="2.4. 克隆仓库至本地"></a>2.4. 克隆仓库至本地</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/THGRakid/Reborn-but-in-Go.git</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/65ba1617871b83018a5b836c.png"></p><h3 id="3-拉取个人分支"><a href="#3-拉取个人分支" class="headerlink" title="3. 拉取个人分支"></a>3. 拉取个人分支</h3><p>&emsp;&emsp;<strong>分支</strong>，顾名思义，是在同一项目在同一时间下的不同版本，项目开发人员可以分工协作开发自己的模块并通过分支更新至版本库。</p><h4 id="3-1-查看项目分支"><a href="#3-1-查看项目分支" class="headerlink" title="3.1. 查看项目分支"></a>3.1. 查看项目分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a //查看所有分支，包括本地分支和远程分支</span><br><span class="line">git branch -r //查看远程分支</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/65ba1627871b83018a5bb31a.png"></p><h4 id="3-2-本地创建新的分支"><a href="#3-2-本地创建新的分支" class="headerlink" title="3.2. 本地创建新的分支"></a>3.2. 本地创建新的分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b branchname //直接新建一个分支然后切换至新创建的分支，其中branchname为自定义分支名字</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/65ba1637871b83018a5be23c.png"></p><h4 id="3-3-将新分支推送至GitHub"><a href="#3-3-将新分支推送至GitHub" class="headerlink" title="3.3. 将新分支推送至GitHub"></a>3.3. 将新分支推送至GitHub</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin branchname</span><br></pre></td></tr></table></figure><p>登录验证</p><img src="https://pic.imgdb.cn/item/65ba1642871b83018a5c0765.png" width="500px"/><p><img src="https://pic.imgdb.cn/item/65ba1651871b83018a5c3c51.png"></p><p>提交成功后可查看验证</p><p><img src="https://pic.imgdb.cn/item/65ba165c871b83018a5c640a.png"></p><h3 id="4-关联本地编辑器"><a href="#4-关联本地编辑器" class="headerlink" title="4. 关联本地编辑器"></a>4. 关联本地编辑器</h3><p>&emsp;&emsp;为了便于开发，我们可以将git操作与Goland编辑器关联，从而更好地进行项目的开发。</p><ul><li><p>打开”文件-设置-版本控制“</p><p><img src="https://pic.imgdb.cn/item/65ba166c871b83018a5c998f.png"></p></li><li><p>配置Git可执行文件路径</p><p><img src="https://pic.imgdb.cn/item/65ba167c871b83018a5cc868.png"></p></li><li><p>绑定Github账号</p><p><img src="https://pic.imgdb.cn/item/65ba168e871b83018a5d0351.png"></p></li></ul><h3 id="5-多人协作测试"><a href="#5-多人协作测试" class="headerlink" title="5. 多人协作测试"></a>5. 多人协作测试</h3><p>&emsp;&emsp;至此，基本的多人协作环境的搭建已经完成，对于初学者来说，可以简单通过提交修改<code>readme.md</code>文件，来验证是否能够成功推送分支内容。</p><ul><li><p>打开readme.md文件，添加自己的分工信息</p></li><li><p>点击提交，添加提交信息</p><p><img src="https://pic.imgdb.cn/item/65ba16b3871b83018a5d788a.png"></p></li><li><p>可看到自己分支下成功提交内容</p><p><img src="https://pic.imgdb.cn/item/65ba16ef871b83018a5e335b.png"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0-前面的话&quot;&gt;&lt;a href=&quot;#0-前面的话&quot; class=&quot;headerlink&quot; title=&quot;0. 前面的话&quot;&gt;&lt;/a&gt;0. 前面的话&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在现代软件开发领域，团队协作和版本控制是构建成功项目不可或缺的两个关键要素。随着软件项目的规模和复杂性不断增长，有效地管理代码、协调多人合作、跟踪变更以及保持项目的稳定性变得愈发重要。而Git作为分布式版本控制系统，为开发人员带来了强大的工具，帮助他们更好地应对这些挑战。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文主要面向初次进行团队开发的成员，旨在探讨Git的正确使用姿势与最佳实践，以便其团队能够更加快速的入手，感受协作开发的高效性，轻松地管理项目的演变过程，并确保项目的质量和稳定性。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Make Carrot Great Again！</title>
    <link href="http://example.com/2024/01/31/Carrot/"/>
    <id>http://example.com/2024/01/31/Carrot/</id>
    <published>2024-01-31T03:57:59.195Z</published>
    <updated>2025-02-24T01:36:19.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="胡萝卜牛逼"><a href="#胡萝卜牛逼" class="headerlink" title="胡萝卜牛逼"></a>胡萝卜牛逼</h1><p>一些小小的测试，致敬胡萝卜！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;胡萝卜牛逼&quot;&gt;&lt;a href=&quot;#胡萝卜牛逼&quot; class=&quot;headerlink&quot; title=&quot;胡萝卜牛逼&quot;&gt;&lt;/a&gt;胡萝卜牛逼&lt;/h1&gt;&lt;p&gt;一些小小的测试，致敬胡萝卜！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/01/31/hello-world/"/>
    <id>http://example.com/2024/01/31/hello-world/</id>
    <published>2024-01-31T03:48:10.678Z</published>
    <updated>2024-01-31T03:47:54.246Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go 语言入门指南：基础语法和常用特性解析（上） | 青训营</title>
    <link href="http://example.com/2023/08/09/go/"/>
    <id>http://example.com/2023/08/09/go/</id>
    <published>2023-08-09T05:32:33.000Z</published>
    <updated>2025-02-24T02:18:05.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-前面的话"><a href="#0-前面的话" class="headerlink" title="0. 前面的话"></a>0. 前面的话</h3><p>本文章为Go语言初学者的帮助教程，旨在帮助读者快速掌握Go编程语言的基础知识和常用特性。</p><p><strong>Go</strong>语言，也被称为<strong>Golang</strong>，是一门由Google开发的现代编程语言，以其简洁、高效和强大的特性受到了广泛的关注和应用。</p><p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</p><p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p><span id="more"></span><h3 id="1-安装和设置"><a href="#1-安装和设置" class="headerlink" title="1. 安装和设置"></a>1. 安装和设置</h3><p>在学习Go语言之前，首先需要进行安装和设置，以确保你的开发环境能够正确地支持Go编程。以下是详细的步骤和注意事项：</p><ol><li><p><strong>下载Go安装包</strong>： </p><p>前往Go官方网站（<a href="https://go.dev/dl/">https://go.dev/dl/</a>）下载适合自己操作系统的安装包。Go支持多种操作系统，包括Windows、macOS和各种Linux发行版。选择与你操作系统和架构匹配的安装包。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4133a7ba79694894b12d516e4057457d~tplv-k3u1fbpfcp-watermark.image" alt="1.png"></p></li><li><p><strong>安装Go</strong>： </p><p>根据你的操作系统选择的安装包，进行相应的安装步骤。在大多数情况下，只需双击安装包并按照提示进行操作即可完成安装。</p></li><li><p><strong>设置环境变量</strong>： </p><p>安装完成后，需要设置Go的环境变量，以便在终端或命令行中使用Go命令。在Windows系统中，你需要将Go的安装目录（通常是 <code>C:\Go</code>）添加到系统的 <code>PATH</code> 环境变量中。</p><p>在macOS和Linux系统中，你需要将Go的安装目录添加到你的shell配置文件（如 <code>.bashrc</code> 或 <code>.zshrc</code>）中。设置好环境变量后，你就可以在终端中运行Go命令了。</p></li><li><p><strong>验证安装</strong>： </p><p>打开终端或命令行，输入 <code>go version</code> 命令，查看Go的版本信息。如果显示了正确的版本号，说明安装成功。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/454a5b7cc56048cb9149130f90c6744e~tplv-k3u1fbpfcp-watermark.image" alt="2.png"></p></li><li><p><strong>创建工作目录</strong>： </p><p>在开始编写Go代码之前，你可能希望创建一个专门用于存放Go项目的工作目录。在这个目录中，你可以组织你的代码文件、依赖和其他资源。</p></li><li><p><strong>选择代码编辑器或集成开发环境（IDE）</strong> ： </p><p>选择一个适合你的代码编辑器或IDE，以便开始编写Go代码。一些流行的选择包括<a href="https://code.visualstudio.com/Download">Visual Studio Code（VSCode）</a>与<a href="https://www.jetbrains.com/go/">GoLand</a>等。</p></li><li><p><strong>Hello World！</strong> ： </p><p>现在，你已经完成了Go的安装和设置，可以尝试编写你的第一个Go程序了。创建一个新的Go源文件，命名为 <code>hello.go</code>，然后输入以下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件后，在终端中进入文件所在目录，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure><p>如果看到输出了 <code>Hello, World!</code>，那么恭喜你，你已经成功地安装、设置和运行了你的第一个Go程序！</p></li></ol><p>安装和设置是开始学习任何编程语言的第一步，正确地完成这些步骤能够为你的Go编程之旅奠定坚实的基础。在接下来的学习中，你将逐渐了解更多关于Go语言的基础知识和特性。</p><h3 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2. 基础语法"></a>2. 基础语法</h3><h4 id="2-1-包和导入"><a href="#2-1-包和导入" class="headerlink" title="2.1. 包和导入"></a>2.1. 包和导入</h4><ul><li>在Go语言中，其程序由包（Packages）组成，每个文件都属于一个包。</li><li>其中<code>main</code> 包是程序的入口，包含了 <code>main()</code> 函数。</li><li>使用 <code>import</code> 关键字导入其他包。</li></ul><p>在上述的<code>Hello.go</code>的程序中，所导入的<code>fmt</code>包实现了格式化 IO（输入&#x2F;输出）的函数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-变量和数据类型："><a href="#2-2-变量和数据类型：" class="headerlink" title="2.2. 变量和数据类型："></a>2.2. 变量和数据类型：</h4><ul><li>使用 <code>var</code> 关键字声明变量，Go会自动推断变量类型。</li><li>基本数据类型包括整型、浮点型、布尔型、字符串等。</li><li>使用 <code>:=</code> 简化变量声明和赋值。</li></ul><p>对于Go语言的变量声明，相比于传统语言的变量声明，Go语言最大的特点是可以选择省略变量类型，编译器可以根据右侧的值自动推断出变量的类型，这极大的方便了我们的开发，同时由于其变量声明有别于其他语言的<strong>变量类型+变量名</strong>，Go语言是相反的，因此省略变量类型的写法也可以方便其他语言的程序员快速上手Go语言。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指明变量类型的变量定义方法</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">string</span> = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">19260817</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不指明变量类型的变量定义方法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">19260817</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化变量定义方法</span></span><br><span class="line">a := <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">b := <span class="number">19260817</span></span><br><span class="line">c := <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-3-常量"><a href="#2-3-常量" class="headerlink" title="2.3. 常量"></a>2.3. 常量</h4><ul><li>使用 <code>const</code> 关键字声明常量。</li><li>常量的值在编译时确定，不能被修改。</li></ul><p>Go语言中常量的声明与其他语言不太相同，需要使用<code>const</code>关键字替换<code>var</code>关键字，其他部分与变量相差不大。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="type">string</span> = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="keyword">const</span> b <span class="type">int</span> = <span class="number">19260817</span></span><br><span class="line"><span class="keyword">const</span> c <span class="type">bool</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-4-控制流"><a href="#2-4-控制流" class="headerlink" title="2.4. 控制流"></a>2.4. 控制流</h4><ul><li>使用 <code>if</code>、<code>else</code>、<code>switch</code> 进行条件判断。</li><li>使用 <code>for</code> 进行循环，支持 <code>for</code>、<code>while</code>、<code>do-while</code> 三种风格。</li><li><code>break</code> 和 <code>continue</code> 用于循环控制。</li></ul><p>对于分支语句if，Go语言和其他语言类似，唯一不同的是对于判断条件部分不需要用小括号包裹起来。而switch分支语句与其他语言略有不同，在Go语言中，不需要添加break，默认执行对应的case语句后退出。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if-else用法示例</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">7</span> % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Printlen(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printlen(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch用法示例</span></span><br><span class="line">a := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.PrintIn(<span class="string">&quot;one&quot;</span>)  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.PrintIn(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        fmt.Printin(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>，<span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;four or five&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.PrintIn(<span class="string">&quot;other&quot;</span>)</span><br></pre></td></tr></table></figure><p>而对于循环语句，Go语言中<strong>没有</strong>其他传统语言中的while循环，但其for循环功能十分强大，支持while循环的书写风格。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统 for 循环</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while 循环风格书写</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-函数"><a href="#2-5-函数" class="headerlink" title="2.5. 函数"></a>2.5. 函数</h4><ul><li>使用 <code>func</code> 关键字定义函数，可以接收参数并返回值。</li><li>支持多返回值。</li><li>函数也可以作为一种类型，用于高阶函数的实现。</li></ul><p>在Go语言中，使用<code>func</code>关键字声明一个函数，函数声明的语法与其他语言略有差异，与基本的变量定义相同，Go语言中，函数的返回类型置于函数名和传递参数之后，需要多加留意。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本函数定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span></span> [return_types] &#123;</span><br><span class="line">   函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于篇幅有限，本篇文章先就此打住，后续复合数据类型相关的知识还请见Go 语言入门指南：基础语法和常用特性解析（下），谢谢！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0-前面的话&quot;&gt;&lt;a href=&quot;#0-前面的话&quot; class=&quot;headerlink&quot; title=&quot;0. 前面的话&quot;&gt;&lt;/a&gt;0. 前面的话&lt;/h3&gt;&lt;p&gt;本文章为Go语言初学者的帮助教程，旨在帮助读者快速掌握Go编程语言的基础知识和常用特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;语言，也被称为&lt;strong&gt;Golang&lt;/strong&gt;，是一门由Google开发的现代编程语言，以其简洁、高效和强大的特性受到了广泛的关注和应用。&lt;/p&gt;
&lt;p&gt;Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。&lt;/p&gt;
&lt;p&gt;对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
